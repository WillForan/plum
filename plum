#!/usr/bin/env perl
use strict; use warnings;
use v5.28;
use feature qw(signatures);
no warnings qw(experimental::signatures experimental::smartmatch);
our $DEBUG=3;

#
# Parse psuedo-plumb(7) (plan9port) plumber files
#

# e.g.
#
#  # open http or https in a browser
#  text matches ^https?://
#  start xdg-open $text
#
#  # use ctrl+c clipboard to convert images when in inkscape
#  from secondary
#  text matches ^(\s+).(jpe?g|gif|ppm)$
#  add base=$1 ext=$2
#  app matches inkscape
#  start convert $text $base.png

####
# format: paragraphs (2x\n delimited) with
#
#  {text,cwd,app,title} matches REGEXP
#  add myvar=$1
#  plum PROGRAM $cwd $myvar 

# where
# * 'text' is the text on the clipboard
# * 'cwd' is current working directory
# * 'app' is the application focused
# and keywords 
#  * from      -- which clipboard
#  * matches   -- regexp
#  * add       -- create variable
#  * start     -- launch program (from cwd of X11 app)


sub try_next($textInfo) {
   my @matches = (); # reg exp matches
   my $cmd = "xx";
   while($_=<main::DATA>) {
      print $_ if $DEBUG>2;
      s/ #.*//;
      
      given($_) {
         when(/^\s*#/) {
            say "skipping comment $_" if $DEBUG;
            next;
         }
         when(m/^from (\w+)/) {
            $textInfo->{'text'}=`xclip -o $1`;
         }
         when(m/^(text|cwd|app|) matches (.*)/) {
            say "matching $2 against $1: $textInfo->{$1}"  if $DEBUG;
            my $re = qr/$2/;
            @matches = ($textInfo->{$1} =~ /$re/);
            # if no matches, we dont do anything
            say "no matches for $_"  if $DEBUG;
            return($cmd) if $#matches < 0;
         }
         when(m/^add (.*)/){
            while( m/(\w+)=\$(\d+)/g) {
               $textInfo->{$1} = $matches[$2-1];
            say "added $1 = ", $matches[$2-1] if $DEBUG;
         }
      }
      # replace command with anything we've stored
      when(m/^start (.*)/){
         $cmd="$1";
         $cmd =~ s/\$(\w+)/$textInfo->{$1}/ge
      }
      default {return($cmd)}
      }
   }
   return $cmd;
};

my $cmd=try_next({'text'=>"https://google.com"});
say $cmd;

__END__
# open http or https in a browser
text matches ^https?://
start xdg-open $text

# use ctrl+c clipboard to convert images when in inkscape
from secondary
text matches ^(\s+).(jpe?g|gif|ppm)$
add base=$1 ext=$2
app matches inkscape
start convert $text $base.png

