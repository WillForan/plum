#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from tkinter import Tk, Entry, Button
from subprocess import run

bg = "#394249"
font = "Source Code Pro"
font_size = 12
h = 20
delm = " âˆŽ "


def toggledock(mouse=None):
    cur = m.attributes("-type")
    geom_str = "%dx%d+0+0" % (m.winfo_width(), h)
    if cur[0] != "dialog":
        m.attributes("-type", "dialog")
        b.configure(background="green")
        e.config(exportselection=True)
    else:
        m.attributes("-type", "dock")
        b.configure(background=bg)
        e.config(exportselection=False)

    if mouse is not None:
        e.icursor("@%d" % mouse.x)

    # toggle window to for WM to see type change
    m.withdraw()
    m.deiconify()
    m.geometry(geom_str)


m = Tk()
e = Entry(width=1000, relief="flat", bg=bg,
          fg="white", highlightthickness=0,
          font=[font, font_size],
          exportselection=False)
b = Button(text=" ", background=bg, command=toggledock)
b.place(width=20, height=h, y=0, x=0)
e.place(x=20,     height=h, y=0)


# ## initial text
cmdlist = ["c<perl -pe 's/^\t|^\s{4}//'",
           "c<sed 's/^/    /'",
           "<sed 's/^/    /'",
           "|xargs xmessage",
           "notify"]
e.insert(0, delm.join(cmdlist))


#  ## Bindings
def find_around(select=False):
    s = e.get()
    d = delm.rstrip().lstrip()
    i = e.index("insert")

    # find closest delim
    ni = s.find(d, i)
    pi = s.rfind(d, 0, i)

    # go to end if not match, otherwise remove deliminter
    if ni == -1:
        ni = len(s)
    else:
        ni -= 1
    if pi == -1:
        pi = 0
    else:
        pi += 2

    # pickout region
    region = s[pi:ni]
    print("region: " + region)

    # should we select it?
    if select:
        e.selection_range(pi, ni)
    return(region)


def plum_cmd(cmd):
    oldbg = b.configure("background")[4]
    b.configure(background="red")
    print(cmd)
    run(['plum', cmd])
    b.configure(background=oldbg)


def send_cmd(mouse, select_only=False):
    if select_only:
        e.icursor("@%d" % mouse.x)
        find_around(select=True)
        return(None)

    if e.selection_present():
        cmd = e.get()[e.index("sel.first"):e.index("sel.last")]
    else:
        e.icursor("@%d" % mouse.x)
        cmd = find_around(select=False)
    plum_cmd(cmd)


def insert_delm(x):
    e.insert(e.index("insert"), delm)


e.bind("<Escape>", lambda x: toggledock())
e.bind("<Control-ButtonPress-3>", lambda x: toggledock(x))
e.bind("<Shift-ButtonPress-3>", lambda x: send_cmd(x, select_only=True))
e.bind("<ButtonPress-3>", lambda x: send_cmd(x))
e.bind("<Return>", insert_delm)


# startup -- NB width doesn't mater for dock
m.attributes("-type", "dock")
m.geometry("0x%d" % h)
m.mainloop()
